- name: Create Mobile CI|CD secret file
  template:
    src: aerogear-digger.secret.yaml.j2
    dest: /tmp/aerogear-digger.secret.yaml
  vars:
    statusMessage: Checking for existing Jenkins
    statusPercentage: "10"
    jenkinsUri: '""'
    jenkinsPreexists: "false"

- name: Create Mobile CI|CD secret
  command: "oc create -f /tmp/aerogear-digger.secret.yaml -n {{ namespace }}"

- name: Check for current Jenkins
  command: "oc get service {{ ag_jenkins.service.name }} -n {{ namespace }}"
  failed_when: false
  changed_when: false
  register: jenkins_check

- name: Copy the jenkins template
  template:
    src: jenkins-persistent.json.j2
    dest: /tmp/jenkins-persistent.json
    force: yes

- name: Ensure Jenkins exists in namespace
  command: "oc new-app -f=/tmp/jenkins-persistent.json -e 'MEMORY_LIMIT={{ jenkins_master_memory_limit }}' -e 'VOLUME_CAPACITY={{ jenkins_master_volume_capacity }}' -n {{ namespace }}"
  when: jenkins_check.rc != 0

- set_fact:
    jenkins_service_preexists: "{{ 'true' if jenkins_check.rc == 0 else 'false' }}"

- name: Copy Jenkins plugin install script to host
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    force: yes
  with_items:
    - {src: install-jenkins-plugins.sh, dest: /tmp/install-jenkins-plugins.sh}
    - {src: plugins/, dest: /tmp/jenkins-plugins/}

- include_tasks: update-secret.yml
  vars:
    status_message: Installing Jenkins plugins
    status_percentage: "20"
    jenkins_uri: ""
    jenkins_preexists: "{{ jenkins_service_preexists }}"

- name: Install Jenkins plugins
  shell: "bash /tmp/install-jenkins-plugins.sh {{ namespace }} {{ ag_jenkins.deployment.name }}"
  register: install_jenkins_plugins

- name: Get Jenkins - Mobile CI|CD URI
  shell: "oc get routes {{ ag_jenkins.route.name }} -n {{ namespace}}  | grep -v NAME | awk '{ print $2 }'"
  register: get_jenkins_uri

- set_fact:
    jenkins_route: "https://{{ get_jenkins_uri.stdout }}"

- name: "Create Android Slave ConfigMap"
  template:
    src: android.configmap.yaml.j2
    dest: /tmp/android.configmap.yaml
    force: yes

- name: Create OpenShift Jenkins Kubernetes Plugin ConfigMap
  command: "oc create -f /tmp/android.configmap.yaml -n {{ namespace }}"

- name: "Read Android SDK definition"
  set_fact:
    android_sdk_image_def: "{{ deployments | selectattr('name', 'match', '^android-sdk$') | map(attribute='containers') | list }}"
  tags:
  - deploy-sdk-pod

- name: "Get image version"
  set_fact:
    android_sdk_image: "{{ android_sdk_image_def[0][0].image }}"
  tags:
  - deploy-sdk-pod

- name: "Update local android-sdk-persistent template with image version and tag"
  template:
    src: android-sdk-persistent-template.json.j2
    dest: "{{ buildfarm_templates_dir }}/android-sdk-persistent-template.json"
  tags:
  - deploy-sdk-pod

- name: "Deploy the Android SDK image"
  command: "oc new-app -f {{ buildfarm_templates_dir }}/android-sdk-persistent-template.json -n {{ namespace }}"
  register: android_create_result
  failed_when:
    - android_create_result.stderr and android_create_result.stderr != '' and 'already exists' not in android_create_result.stderr
  changed_when: android_create_result.rc == 0 or (android_create_result.rc == 1 and 'created' in android_create_result.stdout)
  tags:
  - deploy-sdk-pod

- name: "Pausing for Pods to create"
  pause: seconds=10
  when: android_create_result is changed
  tags:
  - deploy-sdk-pod

- name: Determine what polling logic to use
  local_action: stat path=../playbooks/tasks/poller.yml
  register: poller

- include_tasks: update-secret.yml
  vars:
    status_message: Creating Android SDK container
    status_percentage: "30"
    jenkins_uri: "{{ jenkins_route }}"
    jenkins_preexists: "{{ jenkins_service_preexists }}"

- block:
  - name: "Poll for Pods to become ready"
    command: "oc get dc/{{ ag_android_sdk.deployment.name }} --output jsonpath='{.status.availableReplicas}' -n {{ namespace }}"
    register: poll_result
    until: poll_result.rc == 0 and poll_result.stdout | int > 0
    retries: 60
    delay: 10
    tags:
    - deploy-sdk-pod
  rescue:
  - name: "Attempting redeploy of failed Pod"
    command: "oc deploy --retry dc/{{ ag_android_sdk.deployment.name }} -n {{ namespace }}"
  when: not poller.stat.exists

- name: "Get the Android SDK pod name"
  shell: "oc get pods -n {{ namespace }} | grep {{ ag_android_sdk.deployment.name }} | grep -v deploy | awk '{print$1}'"
  failed_when: output.stdout == ""
  register: output
  changed_when: False
  tags:
  - install-sdk

- name: "Register {{ ag_android_sdk.deployment.name }} pod name"
  set_fact:
    android_sdk_podname: "{{ output.stdout }}"
  tags:
  - install-sdk

-
  block:
    - include: update-secret.yml
      vars:
        status_message: Configuring Android SDK container
        status_percentage: "40"
        jenkins_uri: "{{ jenkins_route }}"
        jenkins_preexists: "{{ jenkins_service_preexists }}"

    - name: "Checks if android sdk is already installed"
      stat:
        path: "{{ android_sdk_home }}/tools/bin/sdkmanager"
      register: sdk_folder

    - name: "Install the Android SDK"
      command: "oc -n {{ namespace }} rsh {{ android_sdk_podname }} androidctl sdk install"
      when: sdk_folder.stat.exists == False

    -
      name: Copy default config file
      copy:
          src: default.cfg
          dest: /tmp/sdk.cfg
          mode: 0777
      when: ANDROID_SDK_AUTO_CONFIG|default('No') == 'Yes'

    -
      name: Create custom config file
      copy:
        content: "{{ ANDROID_SDK_CONFIG }}"
        dest: /tmp/sdk.cfg
        mode: 0777
      when: ANDROID_SDK_AUTO_CONFIG|default('No') == 'Yes' == False and ANDROID_SDK_CONFIG|default(' ') != ' '

    -
      name: Send config file to android sdk container
      command: "oc cp /tmp/sdk.cfg {{ namespace }}/{{ android_sdk_podname }}:/opt/tools/sdk.cfg" 

    - name: "Sync Android Platform Versions via config"
      command: "oc -n {{ namespace }} rsh {{ android_sdk_podname }} androidctl-sync /opt/tools/sdk.cfg"
      register: rsh_cmd
      failed_when: "'Traceback' in rsh_cmd.stdout or 'Common Arguments' in rsh_cmd.stdout"

    - name: "Installing Android SDK, this may take some time"
      command: "oc -n {{ namespace }} rsh {{ android_sdk_podname }} androidctl-sync -y /opt/tools/sdk.cfg"
      when: "'Accept?' in rsh_cmd.stdout"

    - include: update-secret.yml
      vars:
        status_message: Configuring Gradle
        status_percentage: "80"
        jenkins_uri: "{{ jenkins_route }}"
        jenkins_preexists: "{{ jenkins_service_preexists }}"

    - name: "Check gradle wrapper exists"
      command: "oc -n {{ namespace }} exec {{ android_sdk_podname }} -i -- bash -c 'stat {{ android_sdk_home }}/tools/templates/gradle/wrapper/gradlew'"
      register: gradlew_status
      failed_when: False
      changed_when: False

    -
      block:
      - name: "Create required directory"
        command: "oc -n {{ namespace }} exec {{ android_sdk_podname }} -i -- bash -c 'mkdir -p {{ android_sdk_home }}/tools/templates/gradle/wrapper'"

      - name: "Create temp folder"
        file:
          path: /tmp/aerogear-digger-installer
          state: directory
          mode: 0777

      - name: "Copy gradlew to remote temp folder"
        copy:
          src: gradle-wrapper.tar.gz
          dest: /tmp/aerogear-digger-installer/gradle-wrapper.tar.gz
          mode: 0777

      - name: "Copy required tarball"
        command: "oc -n {{ namespace }} rsync /tmp/aerogear-digger-installer/ {{ android_sdk_podname }}:{{ android_sdk_home }}/tools/templates/gradle/wrapper/ --include='gradle-wrapper.tar.gz'"

      - name: "Unarchive gradle files"
        command: "oc -n {{ namespace }} exec {{ android_sdk_podname }} -i -- bash -c 'tar -zxvf {{ android_sdk_home }}/tools/templates/gradle/wrapper/gradle-wrapper.tar.gz -C {{ android_sdk_home }}/tools/templates/gradle/wrapper'"
      when: gradlew_status.rc != 0
  when: ANDROID_SDK_AUTO_CONFIG|default('No') == 'Yes' or ANDROID_SDK_CONFIG|default(' ') != ' '

- include_tasks: update-secret.yml
  vars:
    status_message: Complete
    status_percentage: "100"
    jenkins_uri: "{{ jenkins_route }}"
    jenkins_preexists: "{{ jenkins_service_preexists }}"
