- name: Create Mobile CI|CD secret file
  template:
    src: aerogear-digger.secret.yaml.j2
    dest: /tmp/aerogear-digger.secret.yaml
  vars:
    statusMessage: Checking for existing Jenkins
    statusPercentage: "10"
    jenkinsUri: '""'
    jenkinsPreexists: "false"

- name: Create Mobile CI|CD secret
  command: "oc create -f /tmp/aerogear-digger.secret.yaml -n {{ namespace }}"

- name: Check for current Jenkins
  command: "oc get service {{ ag_jenkins.service.name }} -n {{ namespace }}"
  failed_when: false
  changed_when: false
  register: jenkins_check

- name: Ensure Jenkins exists in namespace
  command: "oc new-app --template=jenkins-persistent -e 'MEMORY_LIMIT={{ jenkins_master_memory_limit }}' -e 'VOLUME_CAPACITY={{ jenkins_master_volume_capacity }}' -n {{ namespace }}"
  when: jenkins_check.rc != 0

- set_fact:
    jenkins_service_preexists: "{{ 'true' if jenkins_check.rc == 0 else 'false' }}"

- name: Copy Jenkins plugin install script to host
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    force: yes
  with_items:
    - {src: install-jenkins-plugins.sh, dest: /tmp/install-jenkins-plugins.sh}
    - {src: plugins/, dest: /tmp/jenkins-plugins/}

- include_tasks: update-secret.yml
  vars:
    status_message: Installing Jenkins plugins
    status_percentage: "20"
    jenkins_uri: ""
    jenkins_preexists: "{{ jenkins_service_preexists }}"

- name: Install Jenkins plugins
  shell: "bash /tmp/install-jenkins-plugins.sh {{ namespace }} {{ ag_jenkins.deployment.name }}"
  register: install_jenkins_plugins

- name: Get Jenkins - Mobile CI|CD URI
  shell: "oc get routes {{ ag_jenkins.route.name }} -n {{ namespace}}  | grep -v NAME | awk '{ print $2 }'"
  register: get_jenkins_uri

- set_fact:
    jenkins_route: "https://{{ get_jenkins_uri.stdout }}"

- name: "Create Android Slave ConfigMap"
  template:
    src: android.configmap.yaml.j2
    dest: /tmp/android.configmap.yaml
    force: yes

- name: Create OpenShift Jenkins Kubernetes Plugin ConfigMap
  command: "oc create -f /tmp/android.configmap.yaml -n {{ namespace }}"

- name: "Read Android SDK definition"
  set_fact:
    android_sdk_image_def: "{{ deployments | selectattr('name', 'match', '^android-sdk$') | map(attribute='containers') | list }}"
  tags:
  - deploy-sdk-pod

- name: "Get image version"
  set_fact:
    android_sdk_image: "{{ android_sdk_image_def[0][0].image }}"
  tags:
  - deploy-sdk-pod

- name: "Update local android-sdk-persistent template with image version and tag"
  template:
    src: android-sdk-persistent-template.json.j2
    dest: "{{ buildfarm_templates_dir }}/android-sdk-persistent-template.json"
  tags:
  - deploy-sdk-pod

- name: "Deploy the Android SDK image"
  command: "oc new-app -f {{ buildfarm_templates_dir }}/android-sdk-persistent-template.json -n {{ namespace }}"
  register: android_create_result
  failed_when:
    - android_create_result.stderr and android_create_result.stderr != '' and 'already exists' not in android_create_result.stderr
  changed_when: android_create_result.rc == 0 or (android_create_result.rc == 1 and 'created' in android_create_result.stdout)
  tags:
  - deploy-sdk-pod

- name: "Pausing for Pods to create"
  pause: seconds=10
  when: android_create_result|changed
  tags:
  - deploy-sdk-pod

- name: Determine what polling logic to use
  local_action: stat path=../playbooks/tasks/poller.yml
  register: poller

- include_tasks: update-secret.yml
  vars:
    status_message: Creating Android SDK container
    status_percentage: "30"
    jenkins_uri: "{{ jenkins_route }}"
    jenkins_preexists: "{{ jenkins_service_preexists }}"

- block:
  - name: "Poll for Pods to become ready"
    command: "oc get dc/{{ ag_android_sdk.deployment.name }} --output jsonpath='{.status.availableReplicas}' -n {{ namespace }}"
    register: poll_result
    until: poll_result.rc == 0 and poll_result.stdout | int > 0
    retries: 60
    delay: 10
    tags:
    - deploy-sdk-pod
  rescue:
  - name: "Attempting redeploy of failed Pod"
    command: "oc deploy --retry dc/{{ ag_android_sdk.deployment.name }} -n {{ namespace }}"
  when: not poller.stat.exists

- name: "Get the Android SDK pod name"
  shell: "oc get pods -n {{ namespace }} | grep {{ ag_android_sdk.deployment.name }} | grep -v deploy | awk '{print$1}'"
  failed_when: output.stdout == ""
  register: output
  changed_when: False
  tags:
  - install-sdk

- name: "Register {{ ag_android_sdk.deployment.name }} pod name"
  set_fact:
    android_sdk_podname: "{{ output.stdout }}"
  tags:
  - install-sdk

- name: "Set random filename"
  set_fact:
    config_file: "sample{{ 10000 | random }}.cfg"
  tags:
  - install-sdk

- debug:
    msg: "Filename set to {{ config_file }}"
  tags:
  - install-sdk

- name: "Template out configuaration file"
  template:
    src: sample_cfg.j2
    dest: /tmp/{{ config_file }}
    force: yes
  vars:
    components: "{{ android_sdk_components }}"
    keystore: "{{ android_debug_keystore }}"
  tags:
    - install-sdk

- include_tasks: update-secret.yml
  vars:
    status_message: Configuring Android SDK container
    status_percentage: "40"
    jenkins_uri: "{{ jenkins_route }}"
    jenkins_preexists: "{{ jenkins_service_preexists }}"

- name: "Copy the Android SDK config file to the container"
  shell: "oc exec  -n {{ namespace }} -i {{ android_sdk_podname }} -- bash -c 'cat > /opt/tools/{{ config_file }}' < /tmp/{{ config_file }}"
  tags:
    - install-sdk

- name: "Set permission on the file"
  shell: "oc exec -n {{ namespace }} -i {{ android_sdk_podname }} -- bash -c 'chmod 775 /opt/tools/{{ config_file }}'"
  tags:
  - install-sdk

- name: "Checks if android sdk folder already exists"
  stat:
    path: "{{ android_sdk_home }}"
  register: sdk_folder
  tags:
  - install-sdk

- name: "Install the Android SDK"
  command: "oc -n {{ namespace }} rsh {{ android_sdk_podname }} androidctl sdk install"
  when: sdk_folder.stat.exists == False
  tags:
  - install-sdk

- name: "Sync Android Platform Versions via config"
  command: "oc -n {{ namespace }} rsh {{ android_sdk_podname }} androidctl-sync /opt/tools/{{ config_file }}"
  register: rsh_cmd
  failed_when: "'Traceback' in rsh_cmd.stdout or 'Common Arguments' in rsh_cmd.stdout"
  tags:
  - install-sdk

- name: "Installing Android SDK, this may take some time"
  command: "oc -n {{ namespace }} rsh {{ android_sdk_podname }} androidctl-sync -y /opt/tools/{{ config_file }}"
  when: "'Accept?' in rsh_cmd.stdout"
  tags:
  - install-sdk

- include_tasks: update-secret.yml
  vars:
    status_message: Configuring Gradle
    status_percentage: "80"
    jenkins_uri: "{{ jenkins_route }}"
    jenkins_preexists: "{{ jenkins_service_preexists }}"

- name: "Check gradle wrapper exists"
  command: "oc -n {{ namespace }} exec {{ android_sdk_podname }} -i -- bash -c 'stat {{ android_sdk_home }}/tools/templates/gradle/wrapper/gradlew'"
  register: gradlew_status
  failed_when: False
  changed_when: False
  tags:
  - install-sdk

-
  block:
  - name: "Create required directory"
    command: "oc -n {{ namespace }} exec {{ android_sdk_podname }} -i -- bash -c 'mkdir -p {{ android_sdk_home }}/tools/templates/gradle/wrapper'"

  - name: "Create temp folder"
    file:
      path: /tmp/aerogear-digger-installer
      state: directory
      mode: 0777

  - name: "Copy gradlew to remote temp folder"
    copy:
      src: gradle-wrapper.tar.gz
      dest: /tmp/aerogear-digger-installer/gradle-wrapper.tar.gz
      mode: 0777

  - name: "Copy required tarball"
    command: "oc -n {{ namespace }} rsync /tmp/aerogear-digger-installer/ {{ android_sdk_podname }}:{{ android_sdk_home }}/tools/templates/gradle/wrapper/ --include='gradle-wrapper.tar.gz'"

  - name: "Unarchive gradle files"
    command: "oc -n {{ namespace }} exec {{ android_sdk_podname }} -i -- bash -c 'tar -zxvf {{ android_sdk_home }}/tools/templates/gradle/wrapper/gradle-wrapper.tar.gz -C {{ android_sdk_home }}/tools/templates/gradle/wrapper'"
  when: gradlew_status.rc != 0
  tags:
  - install-sdk

- include_tasks: update-secret.yml
  vars:
    status_message: Complete
    status_percentage: "100"
    jenkins_uri: "{{ jenkins_route }}"
    jenkins_preexists: "{{ jenkins_service_preexists }}"
